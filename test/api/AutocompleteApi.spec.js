/**
 * Small_EOD
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: adam.dobrawy@siecobywatelska.pl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SmallEodClient);
  }
}(this, function(expect, SmallEodClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SmallEodClient.AutocompleteApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AutocompleteApi', function() {
    describe('autocompleteAdministrativeUnitsList', function() {
      it('should call autocompleteAdministrativeUnitsList successfully', function(done) {
        //uncomment below and update the code to test autocompleteAdministrativeUnitsList
        //instance.autocompleteAdministrativeUnitsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteAdministrativeUnitsRead', function() {
      it('should call autocompleteAdministrativeUnitsRead successfully', function(done) {
        //uncomment below and update the code to test autocompleteAdministrativeUnitsRead
        //instance.autocompleteAdministrativeUnitsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteCasesList', function() {
      it('should call autocompleteCasesList successfully', function(done) {
        //uncomment below and update the code to test autocompleteCasesList
        //instance.autocompleteCasesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteCasesRead', function() {
      it('should call autocompleteCasesRead successfully', function(done) {
        //uncomment below and update the code to test autocompleteCasesRead
        //instance.autocompleteCasesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteChannelsList', function() {
      it('should call autocompleteChannelsList successfully', function(done) {
        //uncomment below and update the code to test autocompleteChannelsList
        //instance.autocompleteChannelsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteChannelsRead', function() {
      it('should call autocompleteChannelsRead successfully', function(done) {
        //uncomment below and update the code to test autocompleteChannelsRead
        //instance.autocompleteChannelsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteDocumentTypesList', function() {
      it('should call autocompleteDocumentTypesList successfully', function(done) {
        //uncomment below and update the code to test autocompleteDocumentTypesList
        //instance.autocompleteDocumentTypesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteDocumentTypesRead', function() {
      it('should call autocompleteDocumentTypesRead successfully', function(done) {
        //uncomment below and update the code to test autocompleteDocumentTypesRead
        //instance.autocompleteDocumentTypesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteEventsList', function() {
      it('should call autocompleteEventsList successfully', function(done) {
        //uncomment below and update the code to test autocompleteEventsList
        //instance.autocompleteEventsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteEventsRead', function() {
      it('should call autocompleteEventsRead successfully', function(done) {
        //uncomment below and update the code to test autocompleteEventsRead
        //instance.autocompleteEventsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteFeatureOptionsList', function() {
      it('should call autocompleteFeatureOptionsList successfully', function(done) {
        //uncomment below and update the code to test autocompleteFeatureOptionsList
        //instance.autocompleteFeatureOptionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteFeatureOptionsRead', function() {
      it('should call autocompleteFeatureOptionsRead successfully', function(done) {
        //uncomment below and update the code to test autocompleteFeatureOptionsRead
        //instance.autocompleteFeatureOptionsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteFeaturesList', function() {
      it('should call autocompleteFeaturesList successfully', function(done) {
        //uncomment below and update the code to test autocompleteFeaturesList
        //instance.autocompleteFeaturesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteFeaturesRead', function() {
      it('should call autocompleteFeaturesRead successfully', function(done) {
        //uncomment below and update the code to test autocompleteFeaturesRead
        //instance.autocompleteFeaturesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteInstitutionsList', function() {
      it('should call autocompleteInstitutionsList successfully', function(done) {
        //uncomment below and update the code to test autocompleteInstitutionsList
        //instance.autocompleteInstitutionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteInstitutionsRead', function() {
      it('should call autocompleteInstitutionsRead successfully', function(done) {
        //uncomment below and update the code to test autocompleteInstitutionsRead
        //instance.autocompleteInstitutionsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteReferenceNumbersList', function() {
      it('should call autocompleteReferenceNumbersList successfully', function(done) {
        //uncomment below and update the code to test autocompleteReferenceNumbersList
        //instance.autocompleteReferenceNumbersList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteReferenceNumbersRead', function() {
      it('should call autocompleteReferenceNumbersRead successfully', function(done) {
        //uncomment below and update the code to test autocompleteReferenceNumbersRead
        //instance.autocompleteReferenceNumbersRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteTagsList', function() {
      it('should call autocompleteTagsList successfully', function(done) {
        //uncomment below and update the code to test autocompleteTagsList
        //instance.autocompleteTagsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteTagsRead', function() {
      it('should call autocompleteTagsRead successfully', function(done) {
        //uncomment below and update the code to test autocompleteTagsRead
        //instance.autocompleteTagsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteUsersList', function() {
      it('should call autocompleteUsersList successfully', function(done) {
        //uncomment below and update the code to test autocompleteUsersList
        //instance.autocompleteUsersList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteUsersRead', function() {
      it('should call autocompleteUsersRead successfully', function(done) {
        //uncomment below and update the code to test autocompleteUsersRead
        //instance.autocompleteUsersRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
